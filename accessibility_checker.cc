#include "utils.h"

#include "accessibility_checker.h"

// Note: This contains only the true values, everything else is considered false
const AccessibilityChecker::AccessCheckMap AccessibilityChecker::access_check_map =
{
    { STR_ZIXINF_IPC, {
            { "getConf", true },
            { "setConf", true },
            { "log", true },
            { "dataSync", true },
            { "dataFree", true },
            { "dataOut", true },
            { "dataIn", true },
            { "guiIO", true },
        },
    },
    { STR_ZIXINF_LANWEBSERVICE, {
            { "update", true },
            { "getConf", true },
            { "dataOut", true },
            { "getMeasurementsList", true },
            { "getMeasurement", true },
            { "getCalibration", true },
            { "getDefaults", true },
            { "getProfilesList", true },
            { "getProfile", true },
            { "getParametersList", true },
            { "getParameter", true },
            { "getTemplatesList", true },
            { "getTemplate", true },
            { "getFilesList", true },
            { "getFile", true },
            { "setMeasurementsList", true },
            { "setMeasurement", true },
            { "setCalibration", true },
            { "setDefaults", true },
            { "setProfilesList", true },
            { "setProfile", true },
            { "setParameter", true },
            { "setTemplatesList", true },
            { "setTemplate", true },
            { "setFile", true },
            { "delMeasurement", true },
            { "delProfile", true },
            { "delTemplate", true },
            { "delFile", true },
            { "guiIO", true },
        },
    },
    { STR_ZIXINF_LANWEBSERVER, {
            { "update", true },
            { "getConf", true },
            { "setConf", true },
            { "dataOut", true },
            { "getMeasurementsList", true },
            { "getMeasurement", true },
            { "getCalibration", true },
            { "getDefaults", true },
            { "getProfilesList", true },
            { "getProfile", true },
            { "getParametersList", true },
            { "getParameter", true },
            { "getTemplatesList", true },
            { "getTemplate", true },
            { "getFilesList", true },
            { "getFile", true },
            { "setMeasurementsList", true },
            { "setMeasurement", true },
            { "setCalibration", true },
            { "setDefaults", true },
            { "setProfilesList", true },
            { "setProfile", true },
            { "setParameter", true },
            { "setTemplatesList", true },
            { "setTemplate", true },
            { "setFile", true },
            { "delMeasurement", true },
            { "delProfile", true },
            { "delTemplate", true },
            { "delFile", true },
            { "guiIO", true },
        },
    },
    { STR_ZIXINF_LANSHAREDFOLDER, {
            { "update", true },
            { "procedure", true },
            { "getMeasurementsList", true },
            { "getMeasurement", true },
            { "getCalibration", true },
            { "getDefaults", true },
            { "getProfilesList", true },
            { "getProfile", true },
            { "getParametersList", true },
            { "getParameter", true },
            { "getTemplatesList", true },
            { "getTemplate", true },
            { "getFilesList", true },
            { "getFile", true },
            { "setMeasurementsList", true },
            { "setMeasurement", true },
            { "setCalibration", true },
            { "setDefaults", true },
            { "setProfilesList", true },
            { "setProfile", true },
            { "setParameter", true },
            { "setTemplatesList", true },
            { "setTemplate", true },
            { "setFile", true },
            { "delMeasurement", true },
            { "delProfile", true },
            { "delTemplate", true },
            { "delFile", true },
            { "guiIO", true },
        },
    },
    { STR_ZIXINF_LANSOCKET, {
            { "update", true },
            { "getMeasurementsList", true },
            { "getMeasurement", true },
            { "getCalibration", true },
            { "getDefaults", true },
            { "getProfilesList", true },
            { "getProfile", true },
            { "getParametersList", true },
            { "getParameter", true },
            { "getTemplatesList", true },
            { "getTemplate", true },
            { "getFilesList", true },
            { "getFile", true },
            { "setMeasurementsList", true },
            { "setMeasurement", true },
            { "setCalibration", true },
            { "setDefaults", true },
            { "setProfilesList", true },
            { "setProfile", true },
            { "setParameter", true },
            { "setTemplatesList", true },
            { "setTemplate", true },
            { "setFile", true },
            { "delMeasurement", true },
            { "delProfile", true },
            { "delTemplate", true },
            { "delFile", true },
            { "guiIO", true },
        },
    },
    { STR_ZIXINF_USB, {
            { "update", true },
            { "procedure", true },
            { "getMeasurementsList", true },
            { "getMeasurement", true },
            { "getCalibration", true },
            { "getDefaults", true },
            { "getProfilesList", true },
            { "getProfile", true },
            { "getParametersList", true },
            { "getParameter", true },
            { "getTemplatesList", true },
            { "getTemplate", true },
            { "getFilesList", true },
            { "getFile", true },
            { "setMeasurementsList", true },
            { "setMeasurement", true },
            { "setCalibration", true },
            { "setDefaults", true },
            { "setProfilesList", true },
            { "setProfile", true },
            { "setParameter", true },
            { "setTemplatesList", true },
            { "setTemplate", true },
            { "setFile", true },
            { "delMeasurement", true },
            { "delProfile", true },
            { "delTemplate", true },
            { "delFile", true },
            { "guiIO", true },
        },
    },
    { STR_ZIXINF_COM1, {
            { "update", true },
            { "getMeasurementsList", true },
            { "getMeasurement", true },
            { "getCalibration", true },
            { "getDefaults", true },
            { "getProfilesList", true },
            { "getProfile", true },
            { "getParametersList", true },
            { "getParameter", true },
            { "getTemplatesList", true },

       },
    },
    { STR_ZIXINF_COM2, {
            { "update", true },
            { "getMeasurementsList", true },
            { "getMeasurement", true },
            { "getCalibration", true },
            { "getDefaults", true },
            { "getProfilesList", true },
            { "getProfile", true },
            { "getParametersList", true },
            { "getParameter", true },
            { "getTemplatesList", true },
       },
    },
};

bool AccessibilityChecker::can_be_accessed(ZixInterface inf, const Glib::ustring& fid) const noexcept
{
    auto it1 = access_check_map.find(inf.to_string());
    if (it1 == access_check_map.end()) {
        PRINT_DEBUG("Unknown Interface used: " << inf.to_string());
        return true;
    }

    auto it2 = it1->second.find(fid);
    if (it2 == it1->second.end())
        return false;

    return it2->second;
}
